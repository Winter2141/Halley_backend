openapi: 3.0.1
info:
  title: Halley API
  description: >
    API documentation for the Halley project. Many things are still placeholder or stubs

    ## Authorization

    Access is controlled via an Auth method that acts as a gateway. For every API call (except /login)
    a userID is expected. The userID is provided in the response from /login, given correct credentials.

  version: 0.1.0
servers:
  - url: http://localhost/api
    description: API endpoint (localhost).

security:
  - userID: []

paths:
  /buildings:
    get:
      tags:
        - Buildings and Property Units
      summary: Get a list of buildings (fabbricati).
      description: >
        Return an array of buildings
      deprecated: false
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      responses:
        "200":
          description: A JSON array of buildings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Building"

    post:
      tags:
        - Buildings and Property Units
      summary: Create a new building
      description: Create a new instance of building with the data provided in body.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildingPOST"
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request, request body does not conform to the schema

  /buildings/{buildingID}:
    get:
      tags:
        - Buildings and Property Units
      summary: Get a building (Fabbricato)
      description: Get a representation of a specified with id
      deprecated: false
      parameters:
        - name: buildingID
          in: path
          required: true
          description: unique identification of building
          schema:
            type: integer
      responses:
        "200":
          description: A JSON object of a building
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Building"
        "404":
          description: Not found, resource does not exist

    put:
      tags:
        - Buildings and Property Units
      summary: Update a building data
      description: Update building representation with the attributes provided in the request body.
      deprecated: true
      parameters:
        - name: buildingID
          in: path
          required: true
          description: unique identification of company
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Building"
      responses:
        "204":
          description: Successfully updated, No content
        "400":
          description: Bad request
        "404":
          description: Resource does not exist

  /campaigns:
    get:
      tags:
        - Campaigns
      summary: fetch all campaigns
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      responses:
        "200":
          description: A JSON array of campaigns data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignGET"
    post:
      tags:
        - Campaigns
      summary: create a new campaign
      description: campaignType can either be sconto, abbinamento or extraTime. discountedMonths is related to extraTime, in the other two cases is at 0 by default.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Campaign"
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request

  /campaigns/{campaignID}:
    get:
      tags:
        - Campaigns
      summary: get a spefic campaign - not used at the moment
      deprecated: true
      parameters:
        - name: campaignID
          in: path
          required: true
          description: unique identification of campaign
          schema:
            type: integer
      responses:
        "200":
          description: A JSON object of campaign data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaign"
        "404":
          description: Not found, campaign does not exist
    put:
      tags:
        - Campaigns
      deprecated: true
      summary: Edit a campaign detail - not used at the moment
      parameters:
        - name: campaignID
          in: path
          required: true
          description: unique identification of campaign
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Campaign"
      responses:
        "204":
          description: Success, no content
        "400":
          description: Bad request
        "404":
          description: Not found, campaign does not exist

    delete:
      tags:
        - Campaigns
      summary: delete a campaign data
      description: delete a campaign.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: campaignID
          in: path
          required: true
          description: unique identification of campaign
          schema:
            type: integer
      responses:
        "204":
          description: Successfully updated, No content
        "400":
          description: Bad request
        "404":
          description: Resource does not exist

  /clients:
    get:
      tags:
        - Clients
      deprecated: false
      summary: Get a list of clients
      description: >
        Return an array of clients.
        The array should contain both private and business client. <br><br>
        **The API can be filtered by various fields.** <br>
        To show **all** the results without any filter simplly avoid the paramater (no parameters = all data). By default the clients should be returned in descending order (from last created to first created), like specifiyng DESC(creationDate).<br>
        The default pagination in main frontend table is of 13 elements per page.

      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
          required: false
          description: the number of clients to respond at a time (aka page). can an integer `> 0`
        - in: query
          name: pageNumber
          schema:
            type: integer
          required: false
          description: number of pages to skip, needs to be a integer `>= 0`
        - in: query
          name: clientType
          schema:
            type: string
          required: false
          description: type of client to filter for. it can be either `privato` or `business`
        - in: query
          name: role
          schema:
            type: string
          required: false
          description: concatenation of the roles, divide by underscore ( _ ) to filter the clients by their role
          example: Sales_Chief_Admin
        - in: query
          name: dateRange
          schema:
            type: string
          required: false
          description: filters the result for a range of dates. I supports at most two elements of type YYYY-MM-DD. First part before underscore ( _ ) is the starting date of the filter while the second part is the ending date of said filter.
          example: 2021-09-10_2021-12-13
        - in: query
          name: clientInterest
          schema:
            type: string
          example: Locazione_Acquisto
          required: false
          description: filters the api resut for the selected interests.

      responses:
        "200":
          description: A JSON array of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClientGET"
    post:
      tags:
        - Clients
      deprecated: false
      summary: Create a new client
      description: >
        Create a new client with the data provided in body. <br>
        The object expected from the API changes based on the client's type <br><br>
        **additional information about the data subObject:** <br>
        the data subObject changes based on the boolean **"isBusiness"**. <br>
        **// if business = true** <br>
        "data": {
                "name": "nome di test",
                "fiscalCode": "123123",
                "vatNumber": "123123",
                "uniqueCode": "Hello123",
                "REA": "REA test",
                "street": "indirizzo di test 1",
                "CAP": "39100",
                "Comune": "Bolzano",
                "Province": "BZ",
                "PEC": "pec test",
                "phoneNumber": "0422 123123",
                "revenue": 12322,
                "numEmployee": "200",
                "sector": "sector test",
                "bankName": "bank name test",
                "headedAssets": true,
                "ongoingMortgages": true,
                "ongoingFunding":  true,
                "bankAccountNumber": "1313",
                "referringAgency": "ref agency test",
                "refName": "ref name test",
                "refEmail": "ref email test",
                "refPhoneNumber": "12399129",
                "firstEncounter": "test first encounter",
                "note": "nota bella"
            } <br>
         **// if business = false** <br>
                 "data": {
                 "fiscalCode": "test fiscal code",
                 "name": "test name",
                 "surname": "test surname",
                 "address": "test address",
                 "city": "test city",
                 "phoneNumber": "12349292",
                 "email": "test mail",
                 "birthDate": "12/01/1990",
                 "numFamilyMembers": 7,
                 "numChildren": 5,
                 "maritalStatus": "sposato",
                 "profession": "test profession",
                 "workContractType": "test contract type",
                 "seniority": 5,
                 "workPlace": "test workplace",
                 "startDate": "12/1/1990",
                 "sector": "test sector",
                 "employeeClass": "test class",
                 "annualPersonalIncome": 123123,
                 "annualFamilyIncome": 321312,
                 "avgMonthlyIncome": 1212,
                 "registeredAsset": true,
                 "currentMortgages": false,
                 "currentFinancing": true,
                 "bankName": "test bank name",
                 "bankAccNumber": "test bank account number",
                 "referenceAgency": "test agency",
                 "educationLevel": "education level",
                 "educationInstitute": "instutute",
                 "educationDate": "12/9/2101",
                 "educationMark": 100,
                 "hobby": "test hobby",
                 "hasPet": true,
                 "firstEncounter": "test first encounter",
                 "note": "test note"
            }

      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientPOST"
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request, request body does not conform to the schema

  /clients/{clientID}:
    get:
      tags:
        - Clients
      deprecated: false
      summary: Get a specific client
      description: >
        the expected result of the request changes based on the type of the client.<br>
        the example in in the responses section shows the expexted result for a **private client**. <br>
        **following, instead, the response expected for a business client** <br><br>
        {
          "clientID": 1,
          "customCode": 123,
          "interest": "rent",
          "type": "privato",
          "name": "some name",
          "fiscalCode": "some code",
          "vatNumber": "some code",
          "uniqueCode": "some code",
          "REA": "some code",
          "street": "some streat",
          "CAP": "12012",
          "comune": "some city",
          "province": "some province",
          "PEC": "some pec",
          "phoneNumber": "1301230",
          "revenue": 123123,
          "numEmployees": "some number",
          "sector": "some sector",
          "bankName": "some bank",
          "headedAssets": true,
          "ongoingMorgages": false,
          "ongoingFunding": false,
          "bankAccountNumber": "some number",
          "referringAgency": "some agency ",
          "refName": "some name",
          "refEmail": "some email",
          "refPhoneNumber": "1230120",
          "firstEncounter": "some text",
          "note": "some text"
        }

      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: clientID
          in: path
          required: true
          description: unique identification of client
          schema:
            type: integer
      responses:
        "200":
          description: A JSON array of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClientGETID"
        "404":
          description: Not Found, client with `clientID` does not exist
    put:
      tags:
        - Clients
      deprecated: false
      summary: Update a client information
      description: >
        Update a client information with the data provided in the body. <br>
        **A client cannot change it's type during an update.**(for instance, a business client cannot become 
        a private client and viceversa)<br><br>
        **additional information about the data subObject:** <br>
        the data subObject changes based on the boolean "isBusiness". <br>
        **// if business = true** <br>
        "data": {
            "name": "nome di test",
            "fiscalCode": "123123",
            "vatNumber": "123123",
            "uniqueCode": "Hello123",
            "REA": "REA test",
            "street": "indirizzo di test 1",
            "CAP": "39100",
            "Comune": "Bolzano",
            "Province": "BZ",
            "PEC": "pec test",
            "phoneNumber": "0422 123123",
            "revenue": 12322,
            "numEmployee": "200",
            "sector": "sector test",
            "bankName": "bank name test",
            "headedAssets": true,
            "ongoingMortgages": true,
            "ongoingFunding":  true,
            "bankAccountNumber": "1313",
            "referringAgency": "ref agency test",
            "refName": "ref name test",
            "refEmail": "ref email test",
            "refPhoneNumber": "12399129",
            "firstEncounter": "test first encounter",
            "note": "nota bella"
          }
         <br>
         **// if business = false** <br>
         "data": {
               "fiscalCode": "test fiscal code",
               "name": "test name",
               "surname": "test surname",
               "address": "test address",
               "city": "test city",
               "phoneNumber": "12349292",
               "email": "test mail",
               "birthDate": "12/01/1990",
               "numFamilyMembers": 7,
               "numChildren": 5,
               "maritalStatus": "sposato",
               "profession": "test profession",
               "workContractType": "test contract type",
               "seniority": 5,
               "workPlace": "test workplace",
               "startDate": "12/1/1990",
               "sector": "test sector",
               "employeeClass": "test class",
               "annualPersonalIncome": 123123,
               "annualFamilyIncome": 321312,
               "avgMonthlyIncome": 1212,
               "registeredAsset": true,
               "currentMortgages": false,
               "currentFinancing": true,
               "bankName": "test bank name",
               "bankAccNumber": "test bank account number",
               "referenceAgency": "test agency",
               "educationLevel": "education level",
               "educationInstitute": "instutute",
               "educationDate": "12/9/2101",
               "educationMark": 100,
               "hobby": "test hobby",
               "hasPet": true,
               "firstEncounter": "test first encounter",
               "note": "test note"
          }
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: clientID
          in: path
          required: true
          description: unique identification of client
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientPOST"
      responses:
        "204":
          description: Successfully updated
        "400":
          description: Bad request
        "404":
          description: Not Found, client with `clientID` does not exist

  /clients/{clientID}/timeline:
    get:
      tags:
        - Clients
      deprecated: true
      summary: Get a client's timeline
      description: >
      parameters:
        - name: clientID
          in: path
          required: true
          description: unique identification of client
          schema:
            type: integer
      responses:
        "200":
          description: A JSON array of entries for the client's timeline
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  - clientID: 1001
                    date: "2021-05-01"
                    text: "Client created"
                  - clientID: 1001
                    date: "2021-05-16"
                    text: "Rent Proposal 303 with Property Unit 111 is accepted"
                    proposalID: 303
                    propertyUnitID: 111
                  - clientID: 1001
                    date: "2021-06-01"
                    text: "Contract signed"
                    contractID: 345

        "404":
          description: Not found, the client with `clientID` does not exist

  /contracts:
    get:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Get a list of proposals
      description: >
        Return an array of contracts
      responses:
        "200":
          description: A JSON array of contracts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contract"

    post:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Create a new contract
      description: Create a new contract with the data provided in body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contract"
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request, request body does not conform to the schema

  /contracts/{contractID}:
    get:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Get a contract
      parameters:
        - name: contractID
          in: path
          required: true
          description: unique identification of contract
          schema:
            type: integer
      responses:
        "200":
          description: A JSON object representing contract
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contract"
        "404":
          description: Not Found, contract with `contractID` does not existed

    put:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Edit a contract detail
      description: >
        This mathod can be used to edit information about the contract, including the status, payment late indication, expire date (in case of renewal), etc.
      parameters:
        - name: contractID
          in: path
          required: true
          description: unique identification of contract
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contract"
      responses:
        "204":
          description: Success, no content

  /contracts/{contractID}/payments:
    get:
      tags:
        - Payments
      summary: Get payment details of a contract
      deprecated: true
      description: >
        Get expected payments for a contract and the details of each as JSON array. The expected payments are created automatically when a contract is created, based on the detail of contract. The status for each payment will be updated by the Treasury when the payment is made and verified.
      parameters:
        - name: contractID
          in: path
          required: true
          description: unique identification of contract
          schema:
            type: integer
      responses:
        "200":
          description: A JSON array of payments data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        "404":
          description: Not Found, contract with `contractID` does not existed or it does not have payment data

  /contracts/{contractID}/payments/{paymentID}:
    put:
      tags:
        - Payments
      deprecated: true
      summary: Update a payment detail
      description: >
        This method can be used by the Treasury to update a specific payment detail, such as marking one as paid.
      parameters:
        - name: contractID
          in: path
          required: true
          description: unique identification of contract
          schema:
            type: integer
        - name: paymentID
          in: path
          required: true
          description: unique identification of a single payment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: paid
                amount:
                  type: number
                  example: 355.5
                paymentDate:
                  type: string
                  format: date
      responses:
        "204":
          description: Success, no content
        "400":
          description: Bad request
        "403":
          description: Forbidden, insufficient permission
        "404":
          description: Not found

  /propunits:
    get:
      tags:
        - Buildings and Property Units
      summary: Get a list of property units
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - in: query
          name: operationType
          schema:
            type: string
          required: false
          description: can be either merge or split
        - in: query
          name: buildingID
          schema:
            type: integer
          required: false
          description: id of the Building from which to filter the property units
        - in: query
          name: pageSize
          schema:
            type: string
          required: true
          description: the number of property units to show at a time (aka page). can be either `all` (will show all pu avaiable) or an integer `> 0`
        - in: query
          name: pageNumber
          schema:
            type: integer
          required: false
          description: number of pages to skip, needs to be a integer >= 0
        - in: query
          name: role
          schema:
            type: string
          required: false
          description: role of the user. if it is admin it will show both obsolete and non obsolete PUs

      description:
        Obtain a list of property units. based on the query string parameters sent the API will returns different result. IF OperationType and Building ID are both sent, the api will return a list of PUs filtered by the buildingId given and usable for the operation specified in the operationType (merge or split).
        if only pageSize or both pageSize and pageNumber are returned the API will returned a list of all the nonObsolete PU filtered by puNumber and pageNumber.
        if the role = "Admin" the result will contain also obsolete PU.
      responses:
        "200":
          description: A JSON array of property units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PropertyUnitGET"
        "400":
          description: "bad request"

    post:
      tags:
        - Buildings and Property Units
      summary: Create a new property unit.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      description:
        Create a new instance of property unit in database with the data provided in body.
        This API also completes merge operations of PU. In order to do so the body of the API needs to
        have an additional element called parentsID (the whole body to be passed in this case in generated by the propunits/merge API).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyUnitPostFinal"
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request, request body does not conform to the schema
        "404":
          description: Not found, the building specified does not exist

  /propunits/merge:
    post:
      tags:
        - Buildings and Property Units
      summary: Create a new property unit via merge operation.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      description:
        The merge function is more of a how would a merged PU look like.
        It expects an array of IDs of the PUs to be merged as input.
        To complete the merge function, the object resulting from this API needs to be passed to either
        propunit POST API or the PUT API. the resulting object will have a field called `requestType` (which can be either POST or PUT)
        which will tell to which api pass the output as input. The field `endpoint` will specify the exact enpoint address.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyUnitMERGE"
      responses:
        "200":
          description: "{requestType: “POST”, endpoint: “/propunit/“, parentsID: propertyUnitIDs, PU: postBody} \b or \b {requestType: “PUT”, endpoint: “/propunit/propertyUnitID“, parentsID: propertyUnitIDs, PU: postBody}"
        "400":
          description: Bad request, request body does not conform to the schema
        "404":
          description: Not found, the building specified does not exist

  /propunits/split:
    post:
      tags:
        - Buildings and Property Units
      summary: Create new property units via split operation
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      description: Create new instances of property units starting from a parent PU. `only PU created by  merge can be split`. The parent of the Merge operation will be set as not obsolete.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: { "propertyUnitID": 192 }
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request, request body does not conform to the schema
        "404":
          description: Not found, the building specified does not exist

  /propunits/{propertyUnitID}:
    get:
      tags:
        - Buildings and Property Units
      summary: Get a representation of a property unit
      description: Obtain a JSON object representing a property unit with `propertyUnitID`
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: propertyUnitID
          in: path
          required: true
          description: unique identification of property unit
          schema:
            type: integer

      responses:
        "200":
          description: A JSON object of a property unit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyUnitGETID"
        "404":
          description: Not found, the property unit with specified id does not exist
    put:
      tags:
        - Buildings and Property Units
      summary: Update a property unit data
      description:
        Update property unit representation with the attributes provided in the request body.
        This API also completes merge operations of PU. In order to do so the body of the API needs to
        have an additional element called parentsID (the whole body to be passed in this case in generated by the propunit/merge API).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyUnitPutFinal"
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: propertyUnitID
          in: path
          required: true
          description: unique identification of property unit
          schema:
            type: integer
      responses:
        "204":
          description: Successfully updated, No content
        "400":
          description: Bad request
        "404":
          description: Resource does not exist
    delete:
      tags:
        - Buildings and Property Units
      summary: delete a property unit data
      description: delete a property unit.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: propertyUnitID
          in: path
          required: true
          description: unique identification of property unit
          schema:
            type: integer
      responses:
        "204":
          description: Successfully updated, No content
        "400":
          description: Bad request
        "404":
          description: Resource does not exist

  /proposals:
    get:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Get a list of proposals
      description: >
        Return an array of proposals
      responses:
        "200":
          description: A JSON array of proposals
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

    post:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Create a new proposal
      description: Create a new proposal with the data provided in body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proposal"
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request, request body does not conform to the schema

  /proposals/{proposalID}:
    get:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Get a proposal
      description: >
      parameters:
        - name: proposalID
          in: path
          required: true
          description: unique identification of proposal
          schema:
            type: integer
      responses:
        "200":
          description: A JSON array of proposals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Proposal"
        "404":
          description: Not found, `proposalID` does not exist

    put:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Update a proposal
      description: >
        Update a proposal's data. This method can be used for many things depending on the fields in the request body sent. Examples are changed proposed price, add pertinences, add new clients as joint holders, or advance the stage of approval of the proposal.
            
        A user may not have the permission to change some specific field(s) of a proposal, or to change stage field to a certain value, depending on the role. In such case the API will response with `403 Forbidden`.

      parameters:
        - name: proposalID
          in: path
          required: true
          description: unique identification of proposal
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proposal"
      responses:
        "204":
          description: Success, no content
        "403":
          description: Forbidden (insufficient permission)
        "404":
          description: Not found, `proposalID` does not exist

  /proposals/{proposalID}/votes:
    get:
      tags:
        - Proposal Votes
      deprecated: true
      summary: Get the committee's votes for proposal
      description: >
        Get the currest state of committee's votes for the proposal as JSON array. Each item corresponds to a committee member identified with `userID` and has the casted vote (if a vote has been casted).
            
        The array will **contain only the committee(s) assigned to this proposal**. By default, all commitees are assigned to a proposal, but this can be overwrite by the chief commitee using the `PUT` method on this endpoint (see following).
      parameters:
        - name: proposalID
          in: path
          required: true
          description: unique identification of proposal
          schema:
            type: integer
      responses:
        "200":
          description: A JSON representation of the proposal's voting status
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      type: integer
                    vote:
                      type: string
                      enum: ["Approve", "Reject", "Negotiate"]
                  required: ["userID"]
                example:
                  - userID: 9442
                    vote: "Approve"
                  - userID: 9443
                    vote: "Reject"
                  - userID: 9444
                    vote: "Negotiate"
                  - userID: 9445

        "404":
          description: Not found, `proposalID` does not exist

    post:
      tags:
        - Proposal Votes
      summary: Cast a committee's vote for this proposal
      deprecated: true
      description: >
        Use this method to cast a vote of a committee to a proposal. The committee must be in a list of assigned commitees of the proposal, otherwise the method returns `403 Forbidden` (i.e. the row for this committee must already exist in the vote table and the API is replacing it with the new vote)

      parameters:
        - name: proposalID
          in: path
          required: true
          description: unique identification of proposal
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: integer
                  example: 9442
                vote:
                  type: string
                  enum: ["Approve", "Reject", "Negotiate"]
              required: ["userID", "vote"]
      responses:
        "201":
          description: Successfully casted a vote
        "403":
          description: Forbidden (insufficient permission)
        "404":
          description: Not found, `proposalID` does not exist

    put:
      tags:
        - Proposal Votes
      deprecated: true
      summary: Replace the entries of committees for proposal
      description: >
        Use this method to overwrite the list of committee(s) required to vote and approve this proposal, passing the new userID(s) to assign for this proposal. The userID(s) passed must have the permission to vote (i.e. must be committee)
            
        Only the chief committee has permission to access this method
      parameters:
        - name: proposalID
          in: path
          required: true
          description: unique identification of proposal
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIDs:
                  type: array
                  items:
                    type: integer
                  example: [9442, 9443]
      responses:
        "204":
          description: Success, no content
        "403":
          description: Forbidden (insufficient permission)
        "404":
          description: Not found, `proposalID` does not exist

  /presales:
    get:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Get a list of presales
      description: >
        Return an array of presale contracts
      responses:
        "200":
          description: A JSON array of proposals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Presale"
        "403":
          description: Forbidden, insufficient permission
    post:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Create a new presale contract
      description: Create a new presale contract with the data provided in body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Presale"
      responses:
        "201":
          description: Successfully created
        "400":
          description: Bad request, request body does not conform to the schema
        "403":
          description: Forbidden, insufficient permission

  /presales/{presaleID}:
    get:
      tags:
        - Proposals, Presales and Contracts
      summary: Get a presale contract
      deprecated: true
      parameters:
        - name: presaleID
          in: path
          required: true
          description: unique identification of presale contract
          schema:
            type: integer
      responses:
        "200":
          description: A JSON object representing presale contract
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Presale"
        "403":
          description: Forbidden, insufficient permission
        "404":
          description: Not Found, presale with `presaleID` does not existed
    put:
      tags:
        - Proposals, Presales and Contracts
      deprecated: true
      summary: Edit a presale contract detail
      description: >
        This mathod can be used to edit information about the presale contract
      parameters:
        - name: presaleID
          in: path
          required: true
          description: unique identification of presale contract
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Presale"
      responses:
        "204":
          description: Success, no content
        "403":
          description: Forbidden, insufficient permission
        "404":
          description: Not Found, presale with `presaleID` does not

  /upload:
    post:
      tags:
        - Upload
      summary: Upload a file
      description: >
        Upload a file for a resource. Resource is identified with the `type` and `id`.
        Type stands for the type of resource, it can be one of the following: Contract, Proposal,Presale, Client, PropUnit, Building.
        fileType has to be sent only in case of type PropUnit, it can be either photo or blueprint
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: integer
                type:
                  type: string
                  enum:
                    [
                      "Contract",
                      "Proposal",
                      "Presale",
                      "Client",
                      "PropUnit",
                      "Building",
                    ]
                filetype:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: Success

  /upload/largeUpload:
    post:
      tags:
        - Upload
      summary: Upload a file
      description: >
        Upload xls or csv file for Building or Property units
      deprecated: true
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer

      requestBody:
        required: true
        content: {}
      responses:
        "200":
          description: Success

  /users:
    get:
      tags:
        - Users
      summary: get list of all registered users.
      description: >
        Return an array of users.
        **The API can be filtered by various fields.** <br>
        To show **all** the results without any filter just dont send any of the not required query paramenters. By default if no pagination is provided and no other filter is used, the users should be showed in descending order (from last created to first created).<br>
        The default pagination is of 13 elements per page.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: string
          required: false
          description: the number of users to show at a time (aka page). can be an integer `> 0`
        - in: query
          name: pageNumber
          schema:
            type: integer
          required: false
          description: number of pages to skip, needs to be a integer `>= 0`
        - in: query
          name: userStatus
          schema:
            type: string
          required: false
          description: can be either "regolare" or "disattivato"
        - in: query
          name: userRole
          schema:
            type: array
            items:
              type: string
          required: false
          description: filters the api resut for the selected roles.

      responses:
        "200":
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    userID:
                      type: integer
                    name:
                      type: string
                    surname:
                      type: string
                    role:
                      type: string
                    status:
                      type: boolean
                    email:
                      type: string
                    photoUrl:
                      type: string
                example:
                  - userID: 9995
                    name: john
                    surname: smith
                    role: Committee
                    status: true
                    email: test@test.it
                    photoUrl: some url
                  - userID: 9001
                    name: josh
                    surname: payne
                    role: Admin
                    status: true
                    email: test2@test.it
                    photoUrl: some url
    post:
      tags:
        - Users
      summary: creates a new user for the application
      description: >
        creates a new user for the application. 
        to work.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  example: ClientManagement
                name:
                  type: string
                  example: john
                surname:
                  type: string
                  example: smith
                company:
                  type: string
                  example: Caltagirone
                email:
                  type: string
                  example: test@test.it
                photoUrl:
                  type: string
                  example: some url
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: integer
                    example: "2"
                  role:
                    type: string
                    example: "Admin"
        "403":
          description: Forbidden, insufficient permission

  /users/roles:
    get:
      tags:
        - Users
      summary: get list of roles
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
      responses:
        "200":
          description: A JSON array of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                    role:
                      type: string
                example:
                  - id: 1
                    role: Committee
                  - id: 2
                    role: Sales

  /users/{userID}:
    get:
      tags:
        - Users
      summary: get a specific user's data
      description: Retrieve all the info of a single specific user
      parameters:
        - name: userID
          in: path
          required: true
          description: ID of user to be retrieved
          schema:
            type: integer
      responses:
        "200":
          description: A JSON object representing a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not Found, user with `userID` does not existed

    put:
      tags:
        - Users
      summary: Edit a user
      description: >
        Use this method to edit a user, such as granting a new role.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifer of a user
          schema:
            type: integer
        - name: userID
          in: path
          required: true
          description: ID of user to be modified
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  example: ClientManagement
                status:
                  type: boolean
                  example: false
                name:
                  type: string
                  example: john
                sunrname:
                  type: string
                  example: smith
                company:
                  type: string
                  example: sony
                email:
                  type: string
                  example: test@test.it
                telephone:
                  type: string
                  example: 0123012
                cellphone:
                  type: string
                  example: 123123
                photoUrl:
                  type: string
                  example: some url

      responses:
        "204":
          description: Success no content
        "403":
          description: Forbidden, insufficient permission
        "404":
          description: Not found, user with `userID` does not exist

    delete:
      tags:
        - Users
      summary: Delete a user
      description: >
        Permanently delete a user from the platform.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: userID
          in: path
          required: true
          description: ID of the user to be deleted
          schema:
            type: integer
      responses:
        "204":
          description: Success no content
        "403":
          description: Forbidden, insufficient permission
        "404":
          description: Not found, user with `userID` does not exist

  /users/{userID}/password:
    put:
      tags:
        - Users
      summary: Change user's password
      description: Use this method to change a user's password, providing the new password as well as the old one to verify.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: userID
          in: path
          required: true
          description: unique identification of user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: "someoldpass"
                newPassword:
                  type: string
                  example: "somenewpass"
      responses:
        "204":
          description: Success no content
        "403":
          description: Forbidden, insufficient permission
        "404":
          description: Not found, user with `userID` does not exist

  /users/{userID}/passwordreset:
    post:
      tags:
        - Users
      summary: Reset user's password
      description: Use this method to reset a user's password. a new password will be generated for this user and replace the old one. This can only be used by administrator in case a user lost his password.
      parameters:
        - name: UserId
          in: header
          required: true
          description: unique identifier of a user
          schema:
            type: integer
        - name: userID
          in: path
          required: true
          description: Identifier of the user to which change password
          schema:
            type: integer
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  tempPassword:
                    type: string
                    example: "12FvG4&Lsdt554"
        "403":
          description: Forbidden, insufficient permission
        "404":
          description: Not found, user with `userID` does not exist

  /users/login:
    post:
      tags:
        - Users
      summary: Login function for the user
      description: Use this method to log in the platform. It checks if the user exists and if the password is correct. if so it returns the id of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userlogin"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: integer
                    example: 1
                  role:
                    type: string
                    example: admin
                  photoUrl:
                    type: string
                    example: some url
        "403":
          description: Forbidden, insufficient permission
        "401":
          description: Incorrect Username and/or Password!
        "500":
          description: Username or password fields are missing

components:
  schemas:
    Building:
      properties:
        buildingID:
          type: integer
          example: 12346
        customCode:
          type: string
          example: B0023
        initiative:
          type: string
          example: something
        company:
          type: string
          example: some company
        accessories:
          type: string
          example: describe it
        geoArea:
          type: string
          example: Nord
        numFloors:
          type: integer
          example: 10
        destination:
          type: string
          example: Commerciale
        addresses:
          type: array
          items:
            type: object
            example:
              {
                "province": "RM",
                "CAP": "12GH2",
                "comune": "Rome",
                "street": "Via Bini 1",
                "region": "Lazio",
              }
        mortgage:
          type: object
          example:
            {
              "agreedValue": 12,
              "remainingValue": 23,
              "isFractioned": true,
              "rate": 123,
              "bankName": "Mediolanum",
              "installmentAmount": 33,
              "duration": "test duration",
              "installmentFreq": "test freq",
              "firstPaymentDate": "12/10/2010",
              "lastPaymentDate": "12/10/2010",
            }

    BuildingPOST:
      properties:
        buildingID:
          type: integer
          example: 12346
        customCode:
          type: string
          example: B0023
        initiative:
          type: string
          example: something
        company:
          type: string
          example: some company
        accessories:
          type: string
          example: describe it
        geoArea:
          type: string
          example: Nord
        numFloors:
          type: integer
          example: 10
        destinationID:
          type: integer
          example: 1
        addresses:
          type: array
          items:
            type: object
            example:
              {
                "province": "RM",
                "CAP": "12GH2",
                "comune": "Rome",
                "street": "Via Bini 1",
                "region": "Lazio",
              }
        mortgage:
          type: object
          example:
            {
              "agreedValue": 12,
              "remainingValue": 23,
              "isFractioned": true,
              "rate": 123,
              "bankName": "Mediolanum",
              "installmentAmount": 33,
              "duration": "test duration",
              "installmentFreq": "test freq",
              "firstPaymentDate": "12/10/2010",
              "lastPaymentDate": "12/10/2010",
            }

    PropertyUnitGET:
      properties:
        propertyUnitID:
          type: integer
          example: 1233445
        codice:
          type: string
          example: PU00001
        status:
          type: string
          example: attivo
        fabbricato:
          type: string
          example: AM123
        società:
          type: string
          example: AM12312
        iniziativa:
          type: string
          example: test
        destinazione:
          type: string
          example: commerciale
        tipo:
          type: string
          example: test
        categoria:
          type: string
          example: test
        geoArea:
          type: string
          example: NW
        venditore:
          type: string
          example: Mario
        creationDate:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        lastUpdate:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        indirizzo:
          type: string
          example: via roma 1
        scala:
          type: string
          example: 12b
        piano:
          type: string
          example: 2
        interno:
          type: string
          example: 2A
        foglio:
          type: string
          example: test
        particella:
          type: string
          example: test
        subalterno:
          type: string
          example: test
        imu:
          type: integer
          example: 123
        rendita catastale:
          type: integer
          example: 123
        Unità immobiliare:
          type: integer
          example: 1000
        balcone:
          type: integer
          example: 123
        terrazzo:
          type: integer
          example: 123
        soppalco:
          type: integer
          example: 123
        loggia:
          type: integer
          example: 123
        giardino:
          type: integer
          example: 123
        mansarda:
          type: integer
          example: 123
        omogeneizzati:
          type: integer
          example: 123
        banca:
          type: string
          example: monte paschi di siena
        durata:
          type: string
          example: test duration
        cadenza rata:
          type: string
          example: test cadenza
        tasso:
          type: integer
          example: 123
        prima rata:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        ultima rata:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        frazionato:
          type: boolean
          example: false
        prezzo vendita:
          type: integer
          example: 123
        mutuo accordato:
          type: integer
          example: 123
        mutuo residuo:
          type: integer
          example: 123
        canone annuale:
          type: integer
          example: 123
        canone mensile:
          type: integer
          example: 123
        oneri di gestione:
          type: integer
          example: 123
        campagne attive:
          type: array
          items:
            type: object
            example:
              {
                "campaign":
                  {
                    "name": "campagna test 4",
                    "campaignType": "extraTime",
                    "percentDiscount": 50,
                    "discountedMonths": 1,
                  },
              }

    PropertyUnitMERGE:
      properties:
        propertyUnitID:
          type: array
          items:
            type: integer
          example: [1, 2]

    PropertyUnitGETID:
      properties:
        propertyUnitID:
          type: integer
          example: 1233445
        codice:
          type: string
          example: PU00001
        status:
          type: string
          example: attivo
        fabbricato:
          type: string
          example: AM123
        società:
          type: string
          example: AM12312
        iniziativa:
          type: string
          example: test
        destinazione:
          type: string
          example: commerciale
        tipo:
          type: string
          example: test
        categoria:
          type: string
          example: test
        geoArea:
          type: string
          example: NW
        venditore:
          type: string
          example: Mario
        creationDate:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        lastUpdate:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        indirizzo:
          type: string
          example: via roma 1
        scala:
          type: string
          example: 12b
        piano:
          type: string
          example: 2
        interno:
          type: string
          example: 2A
        foglio:
          type: string
          example: test
        particella:
          type: string
          example: test
        subalterno:
          type: string
          example: test
        imu:
          type: integer
          example: 123
        rendita catastale:
          type: integer
          example: 123
        Unità immobiliare:
          type: integer
          example: 1000
        balcone:
          type: integer
          example: 123
        terrazzo:
          type: integer
          example: 123
        soppalco:
          type: integer
          example: 123
        loggia:
          type: integer
          example: 123
        giardino:
          type: integer
          example: 123
        mansarda:
          type: integer
          example: 123
        omogeneizzati:
          type: integer
          example: 123
        photoLocation:
          type: string
          example: url
        blueprintLocation:
          type: string
          example: url
        banca:
          type: string
          example: monte paschi di siena
        durata:
          type: string
          example: test duration
        cadenza rata:
          type: string
          example: test cadenza
        tasso:
          type: integer
          example: 123
        prima rata:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        ultima rata:
          type: string
          example: "2021-08-04T07:32:03.148Z"
        frazionato:
          type: boolean
          example: false
        prezzo vendita:
          type: integer
          example: 123
        mutuo accordato:
          type: integer
          example: 123
        mutuo residuo:
          type: integer
          example: 123
        canone annuale:
          type: integer
          example: 123
        canone mensile:
          type: integer
          example: 123
        oneri di gestione:
          type: integer
          example: 123

    PropertyUnitPOST:
      properties:
        customCode:
          type: string
          example: MM123
        buildingID:
          type: integer
          example: 1
        destinationID:
          type: integer
          example: 1
        typeID:
          type: integer
          example: 1
        categoryID:
          type: integer
          example: 1
        addressID:
          type: integer
          example: 1
        mortgage:
          type: object
          example:
            {
              "agreedValue": 12,
              "remainingValue": 23,
              "isFractioned": true,
              "rate": 123,
              "bankName": "Mediolanum",
              "installmentAmount": 33,
              "duration": "test duration",
              "installmentFreq": "test freq",
              "firstPaymentDate": "12/10/2010",
              "lastPaymentDate": "12/10/2010",
            }
        civicNumber:
          type: string
          example: 12
        floor:
          type: string
          example: 1
        internalNumber:
          type: string
          example: 3
        stair:
          type: string
          example: 1
        unitCode:
          type: string
          example: 12m
        description:
          type: string
          example: descrizione di prova
        areaBalcony:
          type: integer
          example: 1
        areaTerrace:
          type: integer
          example: 1
        areaMezzanine:
          type: integer
          example: 1
        areaLoggia:
          type: integer
          example: 1
        areaGarden:
          type: integer
          example: 1
        areaGarret:
          type: integer
          example: 1
        areaOmoTotal:
          type: integer
          example: 1
        areaOmoCoeff:
          type: integer
          example: 1
        energyClass:
          type: string
          example: A
        overlooking:
          type: string
          example: like a creep
        status:
          type: string
          example: libero
        assignedTo:
          type: string
          example: mario
        mngmtCost:
          type: integer
          example: 1234
        priceSaleInitial:
          type: integer
          example: 1234
        priceSaleListing:
          type: integer
          example: 1234
        priceRentMonthly:
          type: integer
          example: 1234
        priceRentAnnual:
          type: integer
          example: 1234
        ctsFoglio:
          type: string
          example: test
        ctsParticella:
          type: string
          example: test
        ctsSubalterno:
          type: string
          example: test
        ctsIMU:
          type: integer
          example: 1234
        ctsRendita:
          type: integer
          example: 1234
        ctsNoteRendita:
          type: string
          example: test note di rendita

    PropertyUnitPostFinal:
      properties:
        PU:
          $ref: "#/components/schemas/PropertyUnitPOST"

    PropertyUnitPUT:
      properties:
        customCode:
          type: string
          example: MM123
        buildingID:
          type: integer
          example: 1
        destinationID:
          type: integer
          example: 1
        typeID:
          type: integer
          example: 1
        categoryID:
          type: integer
          example: 1
        addressID:
          type: integer
          example: 1
        mortgage:
          type: object
          example:
            {
              "agreedValue": 12,
              "remainingValue": 23,
              "isFractioned": true,
              "rate": 123,
              "bankName": "Mediolanum",
              "installmentAmount": 33,
              "duration": "test duration",
              "installmentFreq": "test freq",
              "firstPaymentDate": "12/10/2010",
              "lastPaymentDate": "12/10/2010",
            }
        civicNumber:
          type: string
          example: 12
        floor:
          type: string
          example: 1
        internalNumber:
          type: string
          example: 3
        stair:
          type: string
          example: 1
        unitCode:
          type: string
          example: 12m
        description:
          type: string
          example: descrizione di prova
        areaBalcony:
          type: integer
          example: 1
        areaTerrace:
          type: integer
          example: 1
        areaMezzanine:
          type: integer
          example: 1
        areaLoggia:
          type: integer
          example: 1
        areaGarden:
          type: integer
          example: 1
        areaGarret:
          type: integer
          example: 1
        areaOmoTotal:
          type: integer
          example: 1
        areaOmoCoeff:
          type: integer
          example: 1
        energyClass:
          type: string
          example: A
        overlooking:
          type: string
          example: like a creep
        status:
          type: string
          example: libero
        assignedTo:
          type: string
          example: mario
        mngmtCost:
          type: integer
          example: 1234
        priceSaleInitial:
          type: integer
          example: 1234
        priceSaleListing:
          type: integer
          example: 1234
        priceRentMonthly:
          type: integer
          example: 1234
        priceRentAnnual:
          type: integer
          example: 1234
        ctsFoglio:
          type: string
          example: test
        ctsParticella:
          type: string
          example: test
        ctsSubalterno:
          type: string
          example: test
        ctsIMU:
          type: integer
          example: 1234
        ctsRendita:
          type: integer
          example: 1234
        ctsNoteRendita:
          type: string
          example: test note di rendita
        campaignsIDs:
          type: array
          example: [5, 6, 7]

    PropertyUnitPutFinal:
      properties:
        PU:
          $ref: "#/components/schemas/PropertyUnitPUT"

    ClientGET:
      properties:
        creationDate:
          type: string
          example: "12/12/12"
        role:
          type: string
          example: "some role"
        clientID:
          type: integer
          example: 1
        customCode:
          type: integer
          example: 123
        interest:
          type: string
          example: "rent"
        type:
          type: string
          example: "privato"
        fiscalCode:
          type: string
          example: "LSM12312DLE"
        name:
          type: string
          example: "marco"
        surname:
          type: string
          example: "rossi"
        address:
          type: string
          example: "via roma 1"
        city:
          type: string
          example: "roma"
        phoneNumber:
          type: integer
          example: 123123132
        email:
          type: string
          example: "test@test.it"
        birthDate:
          type: string
          example: "12/01/1980"
        numFamilyMembers:
          type: integer
          example: 4
        numChildern:
          type: integer
          example: 2
        maritalStatus:
          type: string
          example: "married"
        profession:
          type: string
          example: "lawyer"
        workContractType:
          type: string
          example: "part time"
        seniority:
          type: integer
          example: 5
        workPlace:
          type: string
          example: "somewhere"
        startDate:
          type: string
          example: "12/7/2012"
        sector:
          type: string
          example: "some sector"
        employeeClass:
          type: string
          example: "some class"
        annualPersonalIncome:
          type: integer
          example: 13123
        annualFamilyIncome:
          type: integer
          example: 20201
        avgMontlyIncome:
          type: integer
          example: 1500
        registeredAssets:
          type: boolean
        currentMortgages:
          type: boolean
        currentFinancing:
          type: boolean
        bankName:
          type: string
          example: "monte dei paschi"
        bankAccNumber:
          type: string
          example: "123MEEJ2"
        referenceAgency:
          type: string
          example: "some agency"
        educationLevel:
          type: string
          example: "degree"
        educationInstitute:
          type: string
          example: "bicocca"
        educationDate:
          type: string
          example: "3/9/1999"
        educationMark:
          type: integer
          example: 100
        hobby:
          type: string
          example: "fishing"
        hasPets:
          type: boolean
        firstEncounter:
          type: string
          example: "some text"
        note:
          type: string
          example: "some text"

    ClientGETID:
      properties:
        clientID:
          type: integer
          example: 1
        customCode:
          type: integer
          example: 123
        interest:
          type: string
          example: "rent"
        type:
          type: string
          example: "privato"
        fiscalCode:
          type: string
          example: "LSM12312DLEO"
        name:
          type: string
          example: "marco"
        surname:
          type: string
          example: "rossi"
        address:
          type: string
          example: "via roma 1"
        city:
          type: string
          example: "roma"
        phoneNumber:
          type: integer
          example: 123123132
        email:
          type: string
          example: "test@test.it"
        birthDate:
          type: string
          example: "12/01/1980"
        numFamilyMembers:
          type: integer
          example: 4
        numChildern:
          type: integer
          example: 2
        maritalStatus:
          type: string
          example: "married"
        profession:
          type: string
          example: "lawyer"
        workContractType:
          type: string
          example: "part time"
        seniority:
          type: integer
          example: 5
        workPlace:
          type: string
          example: "somewhere"
        startDate:
          type: string
          example: "12/7/2012"
        sector:
          type: string
          example: "some sector"
        employeeClass:
          type: string
          example: "some class"
        annualPersonalIncome:
          type: integer
          example: 13123
        annualFamilyIncome:
          type: integer
          example: 20201
        avgMontlyIncome:
          type: integer
          example: 1500
        registeredAssets:
          type: boolean
        currentMortgages:
          type: boolean
        currentFinancing:
          type: boolean
        bankName:
          type: string
          example: "monte dei paschi"
        bankAccNumber:
          type: string
          example: "123MEEJ2"
        referenceAgency:
          type: string
          example: "some agency"
        educationLevel:
          type: string
          example: "degree"
        educationInstitute:
          type: string
          example: "bicocca"
        educationDate:
          type: string
          example: "3/9/1999"
        educationMark:
          type: integer
          example: 100
        hobby:
          type: string
          example: "fishing"
        hasPets:
          type: boolean
        firstEncounter:
          type: string
          example: "some text"
        note:
          type: string
          example: "some text"

    ClientPOST:
      properties:
        isBusiness:
          type: boolean
          example: true
        customeCode:
          type: string
          example: "client1234"
        type:
          type: string
          enum: ["Privato", "Commerciale"]
        interest:
          type: string
          enum: ["Locazione", "Vendita"]
        documentLocation:
          type: string
          example: "/docs/11"
        data:
          type: object
          example:
            {
              "name": string,
              "fiscalCode": varchar,
              "vatNumber": varchar,
              "uniqueCode": varchar,
              "REA": varchar,
              "street": varchar,
              "CAP": varchar,
              "comune": varchar,
              "province": varchar,
              "PEC": varchar,
              "phoneNumber": varchar,
              "revenue": decimal,
              "numEmployees": varchar,
              "sector": varchar,
              "bankName": varchar,
              "headedAssets": bool,
              "ongoingMorgages": bool,
              "ongoingFunding": bool,
              "bankAccountNumber": varchar,
              "referringAgency": varchar,
              "refName": varchar,
              "refEmail": varchar,
              "refPhoneNumber": varchar,
              "firstEncounter": text,
              "note": text,
            }

    Proposal:
      properties:
        proposalID:
          type: integer
          example: 5321
        ownerID:
          type: integer
          example: 9345
        clients:
          type: array
          items:
            type: object
            properties:
              clientID:
                type: integer
              role:
                type: string
          example:
            [
              { "clientID": 2233, "role": "Principale" },
              { "clientID": 1122, "role": "Cointestatario" },
              { "clientID": 4433, "role": "Garante" },
            ]
        propertyUnitID:
          type: integer
          example: 22366
        pertinenceIDs:
          type: array
          items:
            type: integer
          example: [3456, 7643]

    Contract:
      properties:
        contractID:
          type: integer
          example: 334455
        proposalID:
          type: integer
          example: 11223
        paymentStatus:
          type: string
        status:
          type: string
          example: Active
        creationDate:
          type: string
          format: date
          example: 2021-05-07-10:00:00
        startDate:
          type: string
          format: date
        expireDate:
          type: string
          format: date
          example: "2022-05-07"
        note:
          type: string

    Presale:
      properties:
        presaleID:
          type: integer
          example: 5564
        proposalID:
          type: integer
          example: 11223
        expireDate:
          type: string
          format: date
          example: "2022-05-07"
        status:
          type: string
          example: Active

    Campaign:
      properties:
        name:
          type: string
          example: a name
        percentDiscount:
          type: number
          example: 10.0
        expireDate:
          type: string
          format: date
          example: 2021-06-13-12:00:00
        campaignType:
          type: string
          example: sconto
        discountedMonths:
          type: integer
          example: 0
        note:
          type: string
          example: note di prova della campagna

    CampaignGET:
      properties:
        campaignID:
          type: integer
          example: 1
        name:
          type: string
          example: a name
        percentDiscount:
          type: number
          example: 10.0
        expireDate:
          type: string
          format: date
          example: 2021-06-13-12:00:00
        campaignType:
          type: string
          example: sconto
        discountedMonths:
          type: integer
          example: 0
        note:
          type: string
          example: note di prova della campagna

    User:
      properties:
        userID:
          type: integer
          example: 999
        name:
          type: string
          example: Mario
        surname:
          type: string
          example: rossi
        company:
          type: string
          example: sony
        email:
          type: string
          example: test@test.it
        telephone:
          type: string
          example: 123123
        cellphone:
          type: string
          example: 312312
        role:
          type: string
          example: Sales
        status:
          type: boolean
          example: true
        photoUrl:
          type: string
          example: some url

    userlogin:
      properties:
        email:
          type: string
          example: a name
        password:
          type: string
          example: a password

  securitySchemes:
    userID:
      type: apiKey
      name: userID
      in: header
